package pl.spring.demo.web.controller;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatcher;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

import pl.spring.demo.constants.ModelConstants;
import pl.spring.demo.controller.BookController;
import pl.spring.demo.service.BookService;
import pl.spring.demo.to.BookTo;

public class BookControllerTest {

	private MockMvc mockMvc;

	@Mock
	BookController bookController;
	@InjectMocks
	BookService bookService;

	@Before
	public void setup() {
		InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
		viewResolver.setPrefix("/WEB-INF/templates/");
		viewResolver.setSuffix(".html");
		mockMvc = MockMvcBuilders.standaloneSetup(new BookController()).setViewResolvers(viewResolver).build();
	}

	@Test
	public void testBooksPage() throws Exception{
			// given when
				ResultActions resultActions = mockMvc.perform(get("/books"));
			//then
				resultActions.andExpect(view().name("books"))
				.andExpect(model().attribute("bookList", allBooks){}
}

List<BookTo> allBooks=findAllBooks();

private List<BookTo> findAllBooks() {
	BookTo book1 = new BookTo();
	BookTo book2 = new BookTo();
	BookTo book3 = new BookTo();
	allBooks.add(book1);
	allBooks.add(book2);
	allBooks.add(book3);
	return allBooks;
}
}


